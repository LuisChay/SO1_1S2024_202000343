# Use the official Rust image as a base
FROM rust:latest as builder

# Set the working directory in the container
WORKDIR /usr/src/myapp

# Copy the Cargo.toml and Cargo.lock files to leverage Docker's layer caching
COPY Cargo.toml Cargo.lock ./

# Build dependencies without the source code to leverage Docker's layer caching
RUN mkdir src && echo "fn main() {println!(\"dummy\")}" > src/main.rs && \
    cargo build --release && \
    rm -f src/main.rs

# Copy the source code into the container
COPY . .

# Build the application
RUN cargo build --release

# Use a smaller base image for the final container
FROM debian:buster-slim

# Set the working directory in the container
WORKDIR /usr/src/myapp

# Copy the built binary from the builder stage to the final container
COPY --from=builder /usr/src/myapp/target/release/myapp .

# Expose the port on which your application will run
EXPOSE 5004

# Command to run the application
CMD ["./myapp"]
